name: deploy trivial-api

on:
  workflow_dispatch:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: trigger build
        id: trigger
        run: |
          set -euo pipefail
          ID=$(curl -s -XPOST \
            -H "x-webhook-token: ${{ secrets.DEPLOY_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "git_repo": "https://github.com/Reasonable-Solutions/trivial-api.git",
              "git_ref": "master",
              "nix_attr": null,
              "image_name": "field is not used here"
            }' \
            https://nix.fyfaen.as/trigger-build)

          echo "build_id=$ID" >> "$GITHUB_OUTPUT"

      - name: wait a sec
        run: sleep 5

      - name: stream deploy logs
        run: |
          id=${{ steps.trigger.outputs.build_id }}
          id="${id#build-}"
          curl --no-buffer https://nix.fyfaen.as/logs/$id

      - name: check build status
        id: check_status
        run: |
          id=${{ steps.trigger.outputs.build_id }}

          echo "Waiting for build to complete..."

          STATUS="pending"
          MAX_ATTEMPTS=60
          ATTEMPT=0

          while [ "$STATUS" != "Completed" ] && [ "$STATUS" != "Deployed" ] && [ "$STATUS" != "Failed" ] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            RESPONSE=$(curl -s https://nix.fyfaen.as/status/$id)
            STATUS=$(echo $RESPONSE | jq -r '.status')

            echo "Current status: $STATUS (attempt $ATTEMPT/$MAX_ATTEMPTS)"

            if [ "$STATUS" == "Completed" ] || [ "$STATUS" == "Deployed" ] || [ "$STATUS" == "Failed" ]; then
              break
            fi

            sleep 10
          done

          MESSAGE=$(echo $RESPONSE | jq -r '.message')
          echo "Final status: $STATUS"
          echo "Message: $MESSAGE"

          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "message=$MESSAGE" >> "$GITHUB_OUTPUT"

          if [ "$STATUS" == "Failed" ]; then
            echo "Build failed: $MESSAGE"
            exit 1
          elif [ "$ATTEMPT" -ge "$MAX_ATTEMPTS" ]; then
            echo "Build timed out after 10 minutes"
            exit 1
          fi

          echo "Build succeeded with status: $STATUS"

      - name: report build status
        if: always()
        run: |
          STATUS="${{ steps.check_status.outputs.status || 'unknown' }}"
          MESSAGE="${{ steps.check_status.outputs.message || 'No status information available' }}"

          echo "::group::Build Status Report"
          echo "Build ID: ${{ steps.trigger.outputs.build_id }}"
          echo "Status: $STATUS"
          echo "Message: $MESSAGE"
          echo "::endgroup::"

          if [ "$STATUS" != "Completed" ] && [ "$STATUS" != "Deployed" ] && [ "${{ steps.check_status.outcome }}" != "success" ]; then
            exit 1
          fi
